from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file, session
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash
from datetime import datetime, timedelta
from functools import wraps
import os
import json
import csv
import io
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet

from models import db, User, Chef, Event, MenuItem, Booking, Payment, OTP, SystemConfig, Dish, Ingredient, DishIngredient
from payments import initiate_mpesa_stk, handle_mpesa_callback
from otp import generate_otp, verify_otp
from verification import send_email_code, send_sms_code, verify_code

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SESSION_SECRET', 'dev-secret-key-change-in-production')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///erugah.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@app.context_processor
def inject_year():
    return {'year': datetime.now().year}

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

def role_required(role):
    def decorator(f):
        @wraps(f)
        @login_required
        def decorated_function(*args, **kwargs):
            if current_user.role != role:
                flash('Access denied. Insufficient permissions.', 'danger')
                return redirect(url_for('index'))
            return f(*args, **kwargs)
        return decorated_function
    return decorator

@app.route('/')
def index():
    # Show welcome page for non-logged-in users
    # Show full content (hero + all sections) for logged-in users
    if current_user.is_authenticated:
        return render_template('index.html')
    else:
        return render_template('welcome.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        role = request.form.get('role', 'customer')
        
        if User.query.filter_by(email=email).first():
            flash('Email already registered', 'danger')
            return redirect(url_for('register'))
        
        user = User(email=email, role=role)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        
        # Automatically log in the user after registration
        login_user(user)
        flash('Registration successful! Welcome to e-Rugah.', 'success')
        
        # Redirect to appropriate dashboard based on role
        if user.role == 'admin':
            return redirect(url_for('admin_dashboard'))
        elif user.role == 'chef':
            return redirect(url_for('chef_dashboard'))
        else:
            return redirect(url_for('customer_dashboard'))
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        user = User.query.filter_by(email=email).first()
        if user and user.check_password(password):
            login_user(user)
            flash('Login successful!', 'success')
            
            if user.role == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user.role == 'chef':
                return redirect(url_for('chef_dashboard'))
            else:
                return redirect(url_for('customer_dashboard'))
        
        flash('Invalid email or password', 'danger')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Logged out successfully', 'success')
    return redirect(url_for('index'))

@app.route('/customer/dashboard')
@role_required('customer')
def customer_dashboard():
    events = Event.query.filter_by(customer_id=current_user.id).all()
    return render_template('customer_dashboard.html', events=events)

@app.route('/customer/event/<int:event_id>/details')
@role_required('customer')
def event_details(event_id):
    event = Event.query.get_or_404(event_id)
    if event.customer_id != current_user.id:
        flash('Access denied', 'danger')
        return redirect(url_for('customer_dashboard'))
    
    # Get menu items for the event
    menu_item_ids = event.menu_items.split(',') if event.menu_items else []
    menu_items = MenuItem.query.filter(MenuItem.id.in_(menu_item_ids)).all() if menu_item_ids else []
    
    # Get booking if exists
    booking = Booking.query.filter_by(event_id=event.id).first()
    
    return render_template('event_details.html', event=event, menu_items=menu_items, booking=booking)

@app.route('/customer/create-event', methods=['GET', 'POST'])
@role_required('customer')
def create_event():
    if request.method == 'POST':
        county = request.form.get('county')
        sub_county = request.form.get('sub_county')
        town = request.form.get('town')
        adult_guests = int(request.form.get('adult_guests', 0))
        child_guests = int(request.form.get('child_guests', 0))
        event_date_str = request.form.get('event_date')
        dishes = request.form.getlist('dishes')
        
        event_date = datetime.strptime(event_date_str, '%Y-%m-%d')
        total_guests = adult_guests + child_guests
        
        total_cost = 0.0
        for dish_id in dishes:
            dish = Dish.query.get(int(dish_id))
            dish_ingredients = DishIngredient.query.filter_by(dish_id=dish.id).all()

            dish_cost = 0.0
            for di in dish_ingredients:
                ingredient = Ingredient.query.get(di.ingredient_id)
                scaled_quantity = (di.quantity_for_base_servings / dish.base_servings) * total_guests
                cost = scaled_quantity * ingredient.unit_price
                dish_cost += cost

            markup_amount = dish_cost * (dish.markup / 100)
            selling_price = dish_cost + markup_amount
            total_cost += selling_price
        
        event = Event(
            customer_id=current_user.id,
            county=county,
            sub_county=sub_county,
            town=town,
            adult_guests=adult_guests,
            child_guests=child_guests,
            event_date=event_date,
            menu_items=','.join(dishes),
            total_cost=total_cost
        )
        db.session.add(event)
        db.session.commit()
        
        flash('Event created successfully!', 'success')
        return redirect(url_for('match_chefs', event_id=event.id))
    
    dishes = Dish.query.all()
    return render_template('create_event.html', dishes=dishes)

@app.route('/customer/event/<int:event_id>/match-chefs')
@role_required('customer')
def match_chefs(event_id):
    event = Event.query.get_or_404(event_id)
    if event.customer_id != current_user.id:
        flash('Access denied', 'danger')
        return redirect(url_for('customer_dashboard'))
    
    chefs = Chef.query.filter_by(
        is_verified=True,
        is_approved=True,
        county=event.county,
        sub_county=event.sub_county,
        town=event.town
    ).all()
    
    if not chefs:
        chefs = Chef.query.filter_by(
            is_verified=True,
            is_approved=True,
            county=event.county,
            sub_county=event.sub_county
        ).all()
    
    if not chefs:
        chefs = Chef.query.filter_by(
            is_verified=True,
            is_approved=True,
            county=event.county
        ).all()
    
    return render_template('match_chefs.html', event=event, chefs=chefs)

@app.route('/customer/event/<int:event_id>/book/<int:chef_id>')
@role_required('customer')
def book_chef(event_id, chef_id):
    event = Event.query.get_or_404(event_id)
    chef = Chef.query.get_or_404(chef_id)
    
    if event.customer_id != current_user.id:
        flash('Access denied', 'danger')
        return redirect(url_for('customer_dashboard'))
    
    deposit_config = SystemConfig.query.filter_by(key='deposit_percentage').first()
    deposit_percentage = float(deposit_config.value) if deposit_config else 30.0
    
    deposit_amount = (event.total_cost * deposit_percentage) / 100
    
    booking = Booking(
        event_id=event.id,
        chef_id=chef.id,
        deposit_amount=deposit_amount,
        status='pending'
    )
    db.session.add(booking)
    db.session.commit()
    
    flash('Chef selected! Please proceed to payment.', 'success')
    return redirect(url_for('pay_booking', booking_id=booking.id))

@app.route('/booking/<int:booking_id>/pay', methods=['GET', 'POST'])
@login_required
def pay_booking(booking_id):
    booking = Booking.query.get_or_404(booking_id)
    event = Event.query.get(booking.event_id)
    
    if event.customer_id != current_user.id:
        flash('Access denied', 'danger')
        return redirect(url_for('customer_dashboard'))
    
    if request.method == 'POST':
        phone = request.form.get('phone')
        
        payment = Payment(
            booking_id=booking.id,
            phone_number=phone,
            amount=booking.deposit_amount,
            status='pending'
        )
        db.session.add(payment)
        db.session.commit()
        
        result = initiate_mpesa_stk(phone, booking.deposit_amount, booking.id)
        
        if result.get('success'):
            flash('Payment initiated successfully! Please check your phone.', 'success')
            return redirect(url_for('payment_status', booking_id=booking.id))
        else:
            flash('Payment initiation failed. Please try again.', 'danger')
    
    return render_template('pay_booking.html', booking=booking, event=event)

@app.route('/booking/<int:booking_id>/payment-status')
@login_required
def payment_status(booking_id):
    booking = Booking.query.get_or_404(booking_id)
    event = Event.query.get(booking.event_id)
    payment = Payment.query.filter_by(booking_id=booking.id).order_by(Payment.created_at.desc()).first()
    
    return render_template('payment_status.html', booking=booking, event=event, payment=payment)

@app.route('/mpesa/callback', methods=['POST'])
def mpesa_callback():
    callback_data = request.get_json()
    result = handle_mpesa_callback(callback_data)
    return jsonify(result)

@app.route('/chef/register', methods=['GET', 'POST'])
def chef_register():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        name = request.form.get('name')
        phone = request.form.get('phone')
        county = request.form.get('county')
        sub_county = request.form.get('sub_county')
        town = request.form.get('town')
        about = request.form.get('about')
        meals = request.form.getlist('meals')

        if len(meals) > 5:
            flash('Maximum 5 meals allowed', 'danger')
            return redirect(url_for('chef_register'))

        if User.query.filter_by(email=email).first():
            flash('Email already registered', 'danger')
            return redirect(url_for('chef_register'))

        # Handle photo upload
        photo_url = None
        if 'photo' in request.files:
            photo = request.files['photo']
            if photo and photo.filename:
                # Save photo
                filename = f"chef_{email}_{photo.filename}"
                photo_path = os.path.join('static', 'images', 'chefs', filename)
                os.makedirs(os.path.dirname(photo_path), exist_ok=True)
                photo.save(photo_path)
                photo_url = f"/static/images/chefs/{filename}"

        # Store form data in session for verification
        session['chef_registration'] = {
            'email': email,
            'password': password,
            'name': name,
            'phone': phone,
            'county': county,
            'sub_county': sub_county,
            'town': town,
            'about': about,
            'meals': meals,
            'photo_url': photo_url
        }

        # Don't create user yet - wait for verification
        flash('Please complete email and SMS verification to finish registration.', 'info')
        return render_template('chef_register.html')

    return render_template('chef_register.html')

@app.route('/chef/verify-otp', methods=['GET', 'POST'])
def verify_otp_page():
    email = request.args.get('email') or request.form.get('email')
    
    if request.method == 'POST':
        code = request.form.get('code')
        
        success, message = verify_otp(email, code)
        
        if success:
            user = User.query.filter_by(email=email).first()
            if user and user.chef:
                user.chef.is_verified = True
                db.session.commit()
                # Automatically log in the chef after verification
                login_user(user)
                flash('Email verified successfully! Admin approval pending.', 'success')
                return redirect(url_for('chef_dashboard'))
        
        flash(message, 'danger')
    
    return render_template('verify_otp.html', email=email)

@app.route('/chef/pending')
@role_required('chef')
def chef_pending():
    chef = Chef.query.filter_by(user_id=current_user.id).first()
    if not chef:
        flash('Chef profile not found', 'danger')
        return redirect(url_for('index'))
    
    # If chef is already approved, redirect to dashboard
    if chef.is_approved:
        return redirect(url_for('chef_dashboard'))
    
    return render_template('chef_pending.html', chef=chef)

@app.route('/chef/dashboard')
@role_required('chef')
def chef_dashboard():
    chef = Chef.query.filter_by(user_id=current_user.id).first()
    if not chef:
        flash('Chef profile not found', 'danger')
        return redirect(url_for('index'))
    
    # If chef is not approved yet, redirect to pending page
    if not chef.is_approved:
        return redirect(url_for('chef_pending'))
    
    bookings = Booking.query.filter_by(chef_id=chef.id).all()
    return render_template('chef_dashboard.html', chef=chef, bookings=bookings)

@app.route('/admin/dashboard')
@role_required('admin')
def admin_dashboard():
    pending_chefs = Chef.query.filter_by(is_verified=True, is_approved=False).all()
    approved_chefs = Chef.query.filter_by(is_approved=True).all()
    total_bookings = Booking.query.count()
    confirmed_bookings = Booking.query.filter_by(status='confirmed').count()
    
    return render_template('admin_dashboard.html',
                         pending_chefs=pending_chefs,
                         approved_chefs=approved_chefs,
                         total_bookings=total_bookings,
                         confirmed_bookings=confirmed_bookings)

@app.route('/admin/chef/<int:chef_id>/approve')
@role_required('admin')
def approve_chef(chef_id):
    chef = Chef.query.get_or_404(chef_id)
    chef.is_approved = True
    db.session.commit()
    flash(f'Chef {chef.name} approved successfully!', 'success')
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/chef/<int:chef_id>/reject')
@role_required('admin')
def reject_chef(chef_id):
    chef = Chef.query.get_or_404(chef_id)
    chef.is_approved = False
    db.session.commit()
    flash(f'Chef {chef.name} rejected.', 'warning')
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/menu', methods=['GET', 'POST'])
@role_required('admin')
def manage_menu():
    if request.method == 'POST':
        name = request.form.get('name')
        category = request.form.get('category')
        price = float(request.form.get('price'))
        ingredients = request.form.get('ingredients')
        
        menu_item = MenuItem(
            name=name,
            category=category,
            price_per_person=price,
            ingredients=ingredients
        )
        db.session.add(menu_item)
        db.session.commit()
        flash('Menu item added successfully!', 'success')
        return redirect(url_for('manage_menu'))
    
    menu_items = MenuItem.query.all()
    return render_template('manage_menu.html', menu_items=menu_items)

@app.route('/admin/menu/<int:item_id>/delete')
@role_required('admin')
def delete_menu_item(item_id):
    item = MenuItem.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    flash('Menu item deleted successfully!', 'success')
    return redirect(url_for('manage_menu'))

@app.route('/admin/create-dish', methods=['GET', 'POST'])
@role_required('admin')
def admin_create_dish():
    if request.method == 'POST':
        name = request.form.get('name')
        base_servings = int(request.form.get('base_servings'))
        markup = float(request.form.get('markup'))
        description = request.form.get('description')

        dish = Dish(name=name, base_servings=base_servings, markup=markup, description=description)
        db.session.add(dish)
        db.session.commit()

        # Handle ingredients
        ingredient_names = request.form.getlist('ingredient_name[]')
        units = request.form.getlist('unit[]')
        unit_prices = request.form.getlist('unit_price[]')
        quantities = request.form.getlist('quantity[]')

        for i in range(len(ingredient_names)):
            if ingredient_names[i].strip():
                # Check if ingredient exists, else create
                ingredient = Ingredient.query.filter_by(name=ingredient_names[i].strip()).first()
                if not ingredient:
                    ingredient = Ingredient(name=ingredient_names[i].strip(), unit=units[i], unit_price=float(unit_prices[i]))
                    db.session.add(ingredient)
                    db.session.commit()

                dish_ingredient = DishIngredient(dish_id=dish.id, ingredient_id=ingredient.id, quantity_for_base_servings=float(quantities[i]))
                db.session.add(dish_ingredient)

        db.session.commit()
        flash('Dish created successfully!', 'success')
        return redirect(url_for('admin_create_dish'))

    dishes = Dish.query.all()
    ingredients = Ingredient.query.all()
    return render_template('admin_create_dish.html', dishes=dishes, ingredients=ingredients)

@app.route('/api/calculate-dish-price', methods=['POST'])
@login_required
def calculate_dish_price():
    dish_id = int(request.form.get('dish_id'))
    guests = int(request.form.get('guests'))

    dish = Dish.query.get_or_404(dish_id)
    dish_ingredients = DishIngredient.query.filter_by(dish_id=dish.id).all()

    total_cost = 0.0
    ingredient_breakdown = []

    for di in dish_ingredients:
        ingredient = Ingredient.query.get(di.ingredient_id)
        scaled_quantity = (di.quantity_for_base_servings / dish.base_servings) * guests
        cost = scaled_quantity * ingredient.unit_price
        total_cost += cost
        ingredient_breakdown.append({
            'name': ingredient.name,
            'scaled_quantity': round(scaled_quantity, 2),
            'unit': ingredient.unit,
            'cost': round(cost, 2)
        })

    markup_amount = total_cost * (dish.markup / 100)
    selling_price = total_cost + markup_amount

    return jsonify({
        'dish_name': dish.name,
        'guests': guests,
        'ingredient_breakdown': ingredient_breakdown,
        'total_cost': round(total_cost, 2),
        'markup_percentage': dish.markup,
        'markup_amount': round(markup_amount, 2),
        'selling_price': round(selling_price, 2)
    })

@app.route('/admin/config', methods=['GET', 'POST'])
@role_required('admin')
def config():
    if request.method == 'POST':
        deposit_percentage = request.form.get('deposit_percentage')
        
        config = SystemConfig.query.filter_by(key='deposit_percentage').first()
        if config:
            config.value = deposit_percentage
        else:
            config = SystemConfig(key='deposit_percentage', value=deposit_percentage)
            db.session.add(config)
        
        db.session.commit()
        flash('Configuration updated successfully!', 'success')
        return redirect(url_for('config'))
    
    deposit_config = SystemConfig.query.filter_by(key='deposit_percentage').first()
    deposit_percentage = deposit_config.value if deposit_config else '30'
    
    return render_template('config.html', deposit_percentage=deposit_percentage)

@app.route('/admin/reports')
@role_required('admin')
def reports():
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    chef_id = request.args.get('chef_id')
    county = request.args.get('county')
    
    query = db.session.query(Booking, Event, Chef, Payment).join(
        Event, Booking.event_id == Event.id
    ).join(
        Chef, Booking.chef_id == Chef.id
    ).outerjoin(
        Payment, Booking.id == Payment.booking_id
    )
    
    if start_date:
        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))
    if end_date:
        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))
    if chef_id:
        query = query.filter(Booking.chef_id == int(chef_id))
    if county:
        query = query.filter(Event.county == county)
    
    results = query.all()
    chefs = Chef.query.filter_by(is_approved=True).all()
    
    total_deposits = sum(r.Payment.amount for r in results if r.Payment and r.Payment.status == 'success')
    
    return render_template('reports.html',
                         results=results,
                         chefs=chefs,
                         total_deposits=total_deposits,
                         start_date=start_date,
                         end_date=end_date,
                         chef_id=chef_id,
                         county=county)

@app.route('/admin/reports/export-csv')
@role_required('admin')
def export_csv():
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    query = db.session.query(Booking, Event, Chef, Payment).join(
        Event, Booking.event_id == Event.id
    ).join(
        Chef, Booking.chef_id == Chef.id
    ).outerjoin(
        Payment, Booking.id == Payment.booking_id
    )
    
    if start_date:
        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))
    if end_date:
        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))
    
    results = query.all()
    
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Booking ID', 'Event Date', 'Chef Name', 'Location', 'Guests', 'Total Cost', 'Deposit', 'Status', 'Payment Status'])
    
    for booking, event, chef, payment in results:
        writer.writerow([
            booking.id,
            event.event_date.strftime('%Y-%m-%d'),
            chef.name,
            f"{event.county}, {event.sub_county}, {event.town}",
            event.adult_guests + event.child_guests,
            event.total_cost,
            booking.deposit_amount,
            booking.status,
            payment.status if payment else 'N/A'
        ])
    
    output.seek(0)
    return send_file(
        io.BytesIO(output.getvalue().encode()),
        mimetype='text/csv',
        as_attachment=True,
        download_name='bookings_report.csv'
    )

@app.route('/admin/reports/export-pdf')
@role_required('admin')
def export_pdf():
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    query = db.session.query(Booking, Event, Chef, Payment).join(
        Event, Booking.event_id == Event.id
    ).join(
        Chef, Booking.chef_id == Chef.id
    ).outerjoin(
        Payment, Booking.id == Payment.booking_id
    )
    
    if start_date:
        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))
    if end_date:
        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))
    
    results = query.all()
    
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []
    styles = getSampleStyleSheet()
    
    elements.append(Paragraph("e-Rugah Bookings Report", styles['Title']))
    elements.append(Spacer(1, 12))
    
    data = [['Booking ID', 'Event Date', 'Chef', 'Guests', 'Cost', 'Status']]
    for booking, event, chef, payment in results:
        data.append([
            str(booking.id),
            event.event_date.strftime('%Y-%m-%d'),
            chef.name,
            str(event.adult_guests + event.child_guests),
            f"KES {event.total_cost:.2f}",
            booking.status
        ])
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(table)
    doc.build(elements)
    
    buffer.seek(0)
    return send_file(
        buffer,
        mimetype='application/pdf',
        as_attachment=True,
        download_name='bookings_report.pdf'
    )

@app.route('/send_email_code', methods=['POST'])
def send_email_code_endpoint():
    email = request.json.get('email')
    if not email:
        return jsonify({'success': False, 'message': 'Email is required'})

    try:
        success = send_email_code(email)
        if success:
            return jsonify({'success': True, 'message': 'Verification code sent to your email'})
        else:
            return jsonify({'success': False, 'message': 'Failed to send email'})
    except ValueError as e:
        return jsonify({'success': False, 'message': str(e)})

@app.route('/verify_email_code', methods=['POST'])
def verify_email_code_endpoint():
    email = request.json.get('email')
    code = request.json.get('code')

    if not email or not code:
        return jsonify({'success': False, 'message': 'Email and code are required'})

    success, message = verify_code(email, code, 'email')
    return jsonify({'success': success, 'message': message})

@app.route('/send_sms_code', methods=['POST'])
def send_sms_code_endpoint():
    phone = request.json.get('phone')
    if not phone:
        return jsonify({'success': False, 'message': 'Phone number is required'})

    try:
        success = send_sms_code(phone)
        if success:
            return jsonify({'success': True, 'message': 'Verification code sent to your phone'})
        else:
            return jsonify({'success': False, 'message': 'Failed to send SMS'})
    except ValueError as e:
        return jsonify({'success': False, 'message': str(e)})

@app.route('/verify_sms_code', methods=['POST'])
def verify_sms_code_endpoint():
    phone = request.json.get('phone')
    code = request.json.get('code')

    if not phone or not code:
        return jsonify({'success': False, 'message': 'Phone and code are required'})

    success, message = verify_code(phone, code, 'sms')
    if success:
        # Complete chef registration
        reg_data = session.get('chef_registration')
        if not reg_data:
            return jsonify({'success': False, 'message': 'Registration data not found'})

        try:
            user = User(email=reg_data['email'], role='chef')
            user.set_password(reg_data['password'])
            db.session.add(user)
            db.session.flush()

            chef = Chef(
                user_id=user.id,
                name=reg_data['name'],
                phone=reg_data['phone'],
                county=reg_data['county'],
                sub_county=reg_data['sub_county'],
                town=reg_data['town'],
                about=reg_data['about'],
                meals_offered=','.join(reg_data['meals']),
                photo_url=reg_data['photo_url'],
                is_verified=True,
                is_approved=False
            )
            db.session.add(chef)
            db.session.commit()

            # Clear session data
            session.pop('chef_registration', None)

            # Automatically log in the chef after successful registration
            login_user(user)

            return jsonify({'success': True, 'message': 'Registration completed successfully! Awaiting admin approval.', 'redirect': '/chef/pending'})
        except Exception as e:
            db.session.rollback()
            return jsonify({'success': False, 'message': 'Registration failed. Please try again.'})

    return jsonify({'success': success, 'message': message})

@app.route('/admin/settings', methods=['GET', 'POST'])
@role_required('admin')
def admin_settings():
    if request.method == 'POST':
        # Save settings
        settings_keys = [
            'gmail_user', 'gmail_password',
            'twilio_sid', 'twilio_token', 'twilio_phone',
            'deposit_percentage'
        ]

        for key in settings_keys:
            value = request.form.get(key)
            if value:
                config = SystemConfig.query.filter_by(key=key).first()
                if config:
                    config.value = value
                else:
                    config = SystemConfig(key=key, value=value)
                    db.session.add(config)

        db.session.commit()
        flash('Settings updated successfully!', 'success')
        return redirect(url_for('admin_dashboard'))

    # Get current settings
    settings = {}
    configs = SystemConfig.query.filter(SystemConfig.key.in_([
        'gmail_user', 'gmail_password',
        'twilio_sid', 'twilio_token', 'twilio_phone',
        'deposit_percentage'
    ])).all()

    for config in configs:
        settings[config.key] = config.value

    return render_template('admin_settings.html', settings=settings)

def init_db():
    with app.app_context():
        db.create_all()
        
        if not User.query.filter_by(email='admin@erugah.com').first():
            admin = User(email='admin@erugah.com', role='admin')
            admin.set_password('admin123')
            db.session.add(admin)
        
        if not SystemConfig.query.filter_by(key='deposit_percentage').first():
            config = SystemConfig(key='deposit_percentage', value='30')
            db.session.add(config)
        
        if MenuItem.query.count() == 0:
            sample_items = [
                MenuItem(name='Beef Stew', category='Main', price_per_person=500, ingredients='Beef, Onions, Tomatoes, Spices'),
                MenuItem(name='Chicken Curry', category='Main', price_per_person=450, ingredients='Chicken, Curry powder, Coconut milk'),
                MenuItem(name='Vegetable Rice', category='Side', price_per_person=200, ingredients='Rice, Mixed vegetables, Oil'),
                MenuItem(name='Chapati', category='Side', price_per_person=50, ingredients='Wheat flour, Oil, Salt'),
                MenuItem(name='Fruit Salad', category='Dessert', price_per_person=150, ingredients='Mixed fruits, Honey'),
            ]
            for item in sample_items:
                db.session.add(item)
        
        db.session.commit()
        print("Database initialized successfully!")

if __name__ == '__main__':
    init_db()
    app.run(host='0.0.0.0', port=5000, debug=True)
