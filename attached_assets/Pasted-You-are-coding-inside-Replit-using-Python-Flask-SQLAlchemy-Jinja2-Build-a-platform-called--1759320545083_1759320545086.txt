You are coding inside Replit using Python (Flask + SQLAlchemy + Jinja2).  
Build a platform called **e-Rugah** (Electronic Cooking).  
It connects customers hosting events with professional chefs.  

## üìå Core Features
1. **Authentication**
   - Users register/login. Roles: Customer, Chef, Admin.
   - Password hashing, sessions.

2. **Customer Functions**
   - Create event with: county, sub-county, town, adult guests, child guests, menu selection.
   - System generates ingredient list + cost estimate (sum of menu items √ó guests).
   - Auto-match chefs by location proximity (county ‚Üí sub-county ‚Üí town).
   - View chef profiles, select one, confirm booking.
   - Pay a deposit via **M-PESA Daraja API**.
   - Receive booking confirmation.

3. **Chef Functions**
   - Register with name, phone, email (OTP verification), county, sub-county, town, about bio, meals offered (max 5).
   - Upload profile photo (simulate for now).
   - Await admin approval before visible in searches.

4. **Admin Functions**
   - Approve/reject chefs.
   - Manage menus (CRUD with pricing + ingredients).
   - Configure deposit % rules.
   - View reports: bookings, payments.
   - Export reports to CSV/PDF.

5. **Deposit Payment (Daraja Integration)**
   - When customer selects a chef ‚Üí deposit = % of estimated event cost.
   - Customer redirected to payment page (/booking/<id>/pay).
   - Use **M-PESA Daraja API (STK Push simulation)**:
     - Initiate payment with phone number + amount.
     - On callback success, update Payment.status = "success" and Booking.status = "confirmed".
   - Log all transactions.

6. **OTP Verification**
   - Generate 6-digit OTP on chef registration.
   - Save temporarily in DB with expiry (e.g. 5 minutes).
   - Print OTP to console for now (simulate SMS/email).
   - Chef enters OTP at /verify-otp; if valid, mark verified.

7. **Reports**
   - Admin can filter bookings by date, chef, location.
   - Admin can view total deposits collected per period.
   - Export CSV and PDF.

## üìÇ Project Structure
- main.py ‚Üí Flask app + routes
- models.py ‚Üí SQLAlchemy models (User, Chef, Event, MenuItem, Booking, Payment, OTP)
- templates/ ‚Üí base.html, index.html, create_event.html, chef_register.html, admin_dashboard.html, reports.html
- static/ ‚Üí css/js
- payments.py ‚Üí M-PESA Daraja functions
- otp.py ‚Üí OTP generation/verification
- .env ‚Üí API keys (Daraja consumer key/secret, Flask secret key, DB URL)

## üîê Security
- Role-based access (Flask-Login).
- Password hashing.
- OTP verification for chefs.
- M-PESA payment confirmation logged securely.

## üõ†Ô∏è Tasks for Zencoder.ai
1. Scaffold all models with relationships:
   - User, Chef, Event, MenuItem, Booking, Payment, OTP.
2. Implement routes for customers (/create-event, /events/<id>), chefs (/chef/register, /verify-otp), admin (/admin/*).
3. Integrate Daraja STK Push:
   - Function `initiate_mpesa_stk(phone, amount, booking_id)` in payments.py.
   - Handle callback route (/mpesa/callback) to update Payment + Booking.
   - Store payment logs in DB.
4. Build admin dashboards with Bootstrap for tables.
5. Add CSV/PDF export for reports.

## üîë Notes
- Use SQLite in Replit for now.
- Place Daraja API credentials in .env.
- Assume menu items are seeded in DB with sample prices + ingredient lists.
- Flash messages for user feedback.
- Templates should extend base.html and use Bootstrap for layout.

Generate the full scaffold codebase so that I can run `python main.py` in Replit and test event creation, chef registration, admin approval, and deposit payment flow (with Daraja API stubs).
