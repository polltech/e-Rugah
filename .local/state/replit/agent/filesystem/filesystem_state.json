{"file_contents":{"main.py":{"content":"from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash\nfrom datetime import datetime, timedelta\nfrom functools import wraps\nimport os\nimport json\nimport csv\nimport io\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.lib import colors\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.lib.styles import getSampleStyleSheet\n\nfrom models import db, User, Chef, Event, MenuItem, Booking, Payment, OTP, SystemConfig\nfrom payments import initiate_mpesa_stk, handle_mpesa_callback\nfrom otp import generate_otp, verify_otp\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.getenv('SESSION_SECRET', 'dev-secret-key-change-in-production')\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///erugah.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb.init_app(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef role_required(role):\n    def decorator(f):\n        @wraps(f)\n        @login_required\n        def decorated_function(*args, **kwargs):\n            if current_user.role != role:\n                flash('Access denied. Insufficient permissions.', 'danger')\n                return redirect(url_for('index'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        role = request.form.get('role', 'customer')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already registered', 'danger')\n            return redirect(url_for('register'))\n        \n        user = User(email=email, role=role)\n        user.set_password(password)\n        db.session.add(user)\n        db.session.commit()\n        \n        flash('Registration successful! Please login.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        \n        user = User.query.filter_by(email=email).first()\n        if user and user.check_password(password):\n            login_user(user)\n            flash('Login successful!', 'success')\n            \n            if user.role == 'admin':\n                return redirect(url_for('admin_dashboard'))\n            elif user.role == 'chef':\n                return redirect(url_for('chef_dashboard'))\n            else:\n                return redirect(url_for('customer_dashboard'))\n        \n        flash('Invalid email or password', 'danger')\n    \n    return render_template('login.html')\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Logged out successfully', 'success')\n    return redirect(url_for('index'))\n\n@app.route('/customer/dashboard')\n@role_required('customer')\ndef customer_dashboard():\n    events = Event.query.filter_by(customer_id=current_user.id).all()\n    return render_template('customer_dashboard.html', events=events)\n\n@app.route('/customer/create-event', methods=['GET', 'POST'])\n@role_required('customer')\ndef create_event():\n    if request.method == 'POST':\n        county = request.form.get('county')\n        sub_county = request.form.get('sub_county')\n        town = request.form.get('town')\n        adult_guests = int(request.form.get('adult_guests', 0))\n        child_guests = int(request.form.get('child_guests', 0))\n        event_date_str = request.form.get('event_date')\n        menu_items = request.form.getlist('menu_items')\n        \n        event_date = datetime.strptime(event_date_str, '%Y-%m-%d')\n        total_guests = adult_guests + child_guests\n        \n        selected_items = MenuItem.query.filter(MenuItem.id.in_(menu_items)).all()\n        total_cost = sum(item.price_per_person * total_guests for item in selected_items)\n        \n        event = Event(\n            customer_id=current_user.id,\n            county=county,\n            sub_county=sub_county,\n            town=town,\n            adult_guests=adult_guests,\n            child_guests=child_guests,\n            event_date=event_date,\n            menu_items=','.join(menu_items),\n            total_cost=total_cost\n        )\n        db.session.add(event)\n        db.session.commit()\n        \n        flash('Event created successfully!', 'success')\n        return redirect(url_for('match_chefs', event_id=event.id))\n    \n    menu_items = MenuItem.query.all()\n    return render_template('create_event.html', menu_items=menu_items)\n\n@app.route('/customer/event/<int:event_id>/match-chefs')\n@role_required('customer')\ndef match_chefs(event_id):\n    event = Event.query.get_or_404(event_id)\n    if event.customer_id != current_user.id:\n        flash('Access denied', 'danger')\n        return redirect(url_for('customer_dashboard'))\n    \n    chefs = Chef.query.filter_by(\n        is_verified=True,\n        is_approved=True,\n        county=event.county,\n        sub_county=event.sub_county,\n        town=event.town\n    ).all()\n    \n    if not chefs:\n        chefs = Chef.query.filter_by(\n            is_verified=True,\n            is_approved=True,\n            county=event.county,\n            sub_county=event.sub_county\n        ).all()\n    \n    if not chefs:\n        chefs = Chef.query.filter_by(\n            is_verified=True,\n            is_approved=True,\n            county=event.county\n        ).all()\n    \n    return render_template('match_chefs.html', event=event, chefs=chefs)\n\n@app.route('/customer/event/<int:event_id>/book/<int:chef_id>')\n@role_required('customer')\ndef book_chef(event_id, chef_id):\n    event = Event.query.get_or_404(event_id)\n    chef = Chef.query.get_or_404(chef_id)\n    \n    if event.customer_id != current_user.id:\n        flash('Access denied', 'danger')\n        return redirect(url_for('customer_dashboard'))\n    \n    deposit_config = SystemConfig.query.filter_by(key='deposit_percentage').first()\n    deposit_percentage = float(deposit_config.value) if deposit_config else 30.0\n    \n    deposit_amount = (event.total_cost * deposit_percentage) / 100\n    \n    booking = Booking(\n        event_id=event.id,\n        chef_id=chef.id,\n        deposit_amount=deposit_amount,\n        status='pending'\n    )\n    db.session.add(booking)\n    db.session.commit()\n    \n    flash('Chef selected! Please proceed to payment.', 'success')\n    return redirect(url_for('pay_booking', booking_id=booking.id))\n\n@app.route('/booking/<int:booking_id>/pay', methods=['GET', 'POST'])\n@login_required\ndef pay_booking(booking_id):\n    booking = Booking.query.get_or_404(booking_id)\n    event = Event.query.get(booking.event_id)\n    \n    if event.customer_id != current_user.id:\n        flash('Access denied', 'danger')\n        return redirect(url_for('customer_dashboard'))\n    \n    if request.method == 'POST':\n        phone = request.form.get('phone')\n        \n        payment = Payment(\n            booking_id=booking.id,\n            phone_number=phone,\n            amount=booking.deposit_amount,\n            status='pending'\n        )\n        db.session.add(payment)\n        db.session.commit()\n        \n        result = initiate_mpesa_stk(phone, booking.deposit_amount, booking.id)\n        \n        if result.get('success'):\n            flash('Payment initiated successfully! Please check your phone.', 'success')\n            return redirect(url_for('payment_status', booking_id=booking.id))\n        else:\n            flash('Payment initiation failed. Please try again.', 'danger')\n    \n    return render_template('pay_booking.html', booking=booking, event=event)\n\n@app.route('/booking/<int:booking_id>/payment-status')\n@login_required\ndef payment_status(booking_id):\n    booking = Booking.query.get_or_404(booking_id)\n    event = Event.query.get(booking.event_id)\n    payment = Payment.query.filter_by(booking_id=booking.id).order_by(Payment.created_at.desc()).first()\n    \n    return render_template('payment_status.html', booking=booking, event=event, payment=payment)\n\n@app.route('/mpesa/callback', methods=['POST'])\ndef mpesa_callback():\n    callback_data = request.get_json()\n    result = handle_mpesa_callback(callback_data)\n    return jsonify(result)\n\n@app.route('/chef/register', methods=['GET', 'POST'])\ndef chef_register():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')\n        name = request.form.get('name')\n        phone = request.form.get('phone')\n        county = request.form.get('county')\n        sub_county = request.form.get('sub_county')\n        town = request.form.get('town')\n        about = request.form.get('about')\n        meals = request.form.getlist('meals')\n        \n        if len(meals) > 5:\n            flash('Maximum 5 meals allowed', 'danger')\n            return redirect(url_for('chef_register'))\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already registered', 'danger')\n            return redirect(url_for('chef_register'))\n        \n        user = User(email=email, role='chef')\n        user.set_password(password)\n        db.session.add(user)\n        db.session.flush()\n        \n        chef = Chef(\n            user_id=user.id,\n            name=name,\n            phone=phone,\n            county=county,\n            sub_county=sub_county,\n            town=town,\n            about=about,\n            meals_offered=','.join(meals),\n            is_verified=False,\n            is_approved=False\n        )\n        db.session.add(chef)\n        db.session.commit()\n        \n        otp_code = generate_otp(email)\n        \n        flash('Registration successful! Please verify your email with the OTP sent.', 'success')\n        return redirect(url_for('verify_otp_page', email=email))\n    \n    return render_template('chef_register.html')\n\n@app.route('/chef/verify-otp', methods=['GET', 'POST'])\ndef verify_otp_page():\n    email = request.args.get('email') or request.form.get('email')\n    \n    if request.method == 'POST':\n        code = request.form.get('code')\n        \n        success, message = verify_otp(email, code)\n        \n        if success:\n            user = User.query.filter_by(email=email).first()\n            if user and user.chef:\n                user.chef.is_verified = True\n                db.session.commit()\n                flash('Email verified successfully! Admin approval pending.', 'success')\n                return redirect(url_for('login'))\n        \n        flash(message, 'danger')\n    \n    return render_template('verify_otp.html', email=email)\n\n@app.route('/chef/dashboard')\n@role_required('chef')\ndef chef_dashboard():\n    chef = Chef.query.filter_by(user_id=current_user.id).first()\n    if not chef:\n        flash('Chef profile not found', 'danger')\n        return redirect(url_for('index'))\n    \n    bookings = Booking.query.filter_by(chef_id=chef.id).all()\n    return render_template('chef_dashboard.html', chef=chef, bookings=bookings)\n\n@app.route('/admin/dashboard')\n@role_required('admin')\ndef admin_dashboard():\n    pending_chefs = Chef.query.filter_by(is_verified=True, is_approved=False).all()\n    approved_chefs = Chef.query.filter_by(is_approved=True).all()\n    total_bookings = Booking.query.count()\n    confirmed_bookings = Booking.query.filter_by(status='confirmed').count()\n    \n    return render_template('admin_dashboard.html',\n                         pending_chefs=pending_chefs,\n                         approved_chefs=approved_chefs,\n                         total_bookings=total_bookings,\n                         confirmed_bookings=confirmed_bookings)\n\n@app.route('/admin/chef/<int:chef_id>/approve')\n@role_required('admin')\ndef approve_chef(chef_id):\n    chef = Chef.query.get_or_404(chef_id)\n    chef.is_approved = True\n    db.session.commit()\n    flash(f'Chef {chef.name} approved successfully!', 'success')\n    return redirect(url_for('admin_dashboard'))\n\n@app.route('/admin/chef/<int:chef_id>/reject')\n@role_required('admin')\ndef reject_chef(chef_id):\n    chef = Chef.query.get_or_404(chef_id)\n    chef.is_approved = False\n    db.session.commit()\n    flash(f'Chef {chef.name} rejected.', 'warning')\n    return redirect(url_for('admin_dashboard'))\n\n@app.route('/admin/menu', methods=['GET', 'POST'])\n@role_required('admin')\ndef manage_menu():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        category = request.form.get('category')\n        price = float(request.form.get('price'))\n        ingredients = request.form.get('ingredients')\n        \n        menu_item = MenuItem(\n            name=name,\n            category=category,\n            price_per_person=price,\n            ingredients=ingredients\n        )\n        db.session.add(menu_item)\n        db.session.commit()\n        flash('Menu item added successfully!', 'success')\n        return redirect(url_for('manage_menu'))\n    \n    menu_items = MenuItem.query.all()\n    return render_template('manage_menu.html', menu_items=menu_items)\n\n@app.route('/admin/menu/<int:item_id>/delete')\n@role_required('admin')\ndef delete_menu_item(item_id):\n    item = MenuItem.query.get_or_404(item_id)\n    db.session.delete(item)\n    db.session.commit()\n    flash('Menu item deleted successfully!', 'success')\n    return redirect(url_for('manage_menu'))\n\n@app.route('/admin/config', methods=['GET', 'POST'])\n@role_required('admin')\ndef config():\n    if request.method == 'POST':\n        deposit_percentage = request.form.get('deposit_percentage')\n        \n        config = SystemConfig.query.filter_by(key='deposit_percentage').first()\n        if config:\n            config.value = deposit_percentage\n        else:\n            config = SystemConfig(key='deposit_percentage', value=deposit_percentage)\n            db.session.add(config)\n        \n        db.session.commit()\n        flash('Configuration updated successfully!', 'success')\n        return redirect(url_for('config'))\n    \n    deposit_config = SystemConfig.query.filter_by(key='deposit_percentage').first()\n    deposit_percentage = deposit_config.value if deposit_config else '30'\n    \n    return render_template('config.html', deposit_percentage=deposit_percentage)\n\n@app.route('/admin/reports')\n@role_required('admin')\ndef reports():\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    chef_id = request.args.get('chef_id')\n    county = request.args.get('county')\n    \n    query = db.session.query(Booking, Event, Chef, Payment).join(\n        Event, Booking.event_id == Event.id\n    ).join(\n        Chef, Booking.chef_id == Chef.id\n    ).outerjoin(\n        Payment, Booking.id == Payment.booking_id\n    )\n    \n    if start_date:\n        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))\n    if end_date:\n        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))\n    if chef_id:\n        query = query.filter(Booking.chef_id == int(chef_id))\n    if county:\n        query = query.filter(Event.county == county)\n    \n    results = query.all()\n    chefs = Chef.query.filter_by(is_approved=True).all()\n    \n    total_deposits = sum(r.Payment.amount for r in results if r.Payment and r.Payment.status == 'success')\n    \n    return render_template('reports.html',\n                         results=results,\n                         chefs=chefs,\n                         total_deposits=total_deposits,\n                         start_date=start_date,\n                         end_date=end_date,\n                         chef_id=chef_id,\n                         county=county)\n\n@app.route('/admin/reports/export-csv')\n@role_required('admin')\ndef export_csv():\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    \n    query = db.session.query(Booking, Event, Chef, Payment).join(\n        Event, Booking.event_id == Event.id\n    ).join(\n        Chef, Booking.chef_id == Chef.id\n    ).outerjoin(\n        Payment, Booking.id == Payment.booking_id\n    )\n    \n    if start_date:\n        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))\n    if end_date:\n        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))\n    \n    results = query.all()\n    \n    output = io.StringIO()\n    writer = csv.writer(output)\n    writer.writerow(['Booking ID', 'Event Date', 'Chef Name', 'Location', 'Guests', 'Total Cost', 'Deposit', 'Status', 'Payment Status'])\n    \n    for booking, event, chef, payment in results:\n        writer.writerow([\n            booking.id,\n            event.event_date.strftime('%Y-%m-%d'),\n            chef.name,\n            f\"{event.county}, {event.sub_county}, {event.town}\",\n            event.adult_guests + event.child_guests,\n            event.total_cost,\n            booking.deposit_amount,\n            booking.status,\n            payment.status if payment else 'N/A'\n        ])\n    \n    output.seek(0)\n    return send_file(\n        io.BytesIO(output.getvalue().encode()),\n        mimetype='text/csv',\n        as_attachment=True,\n        download_name='bookings_report.csv'\n    )\n\n@app.route('/admin/reports/export-pdf')\n@role_required('admin')\ndef export_pdf():\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    \n    query = db.session.query(Booking, Event, Chef, Payment).join(\n        Event, Booking.event_id == Event.id\n    ).join(\n        Chef, Booking.chef_id == Chef.id\n    ).outerjoin(\n        Payment, Booking.id == Payment.booking_id\n    )\n    \n    if start_date:\n        query = query.filter(Booking.created_at >= datetime.strptime(start_date, '%Y-%m-%d'))\n    if end_date:\n        query = query.filter(Booking.created_at <= datetime.strptime(end_date, '%Y-%m-%d'))\n    \n    results = query.all()\n    \n    buffer = io.BytesIO()\n    doc = SimpleDocTemplate(buffer, pagesize=letter)\n    elements = []\n    styles = getSampleStyleSheet()\n    \n    elements.append(Paragraph(\"e-Rugah Bookings Report\", styles['Title']))\n    elements.append(Spacer(1, 12))\n    \n    data = [['Booking ID', 'Event Date', 'Chef', 'Guests', 'Cost', 'Status']]\n    for booking, event, chef, payment in results:\n        data.append([\n            str(booking.id),\n            event.event_date.strftime('%Y-%m-%d'),\n            chef.name,\n            str(event.adult_guests + event.child_guests),\n            f\"KES {event.total_cost:.2f}\",\n            booking.status\n        ])\n    \n    table = Table(data)\n    table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, 0), 10),\n        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    \n    elements.append(table)\n    doc.build(elements)\n    \n    buffer.seek(0)\n    return send_file(\n        buffer,\n        mimetype='application/pdf',\n        as_attachment=True,\n        download_name='bookings_report.pdf'\n    )\n\ndef init_db():\n    with app.app_context():\n        db.create_all()\n        \n        if not User.query.filter_by(email='admin@erugah.com').first():\n            admin = User(email='admin@erugah.com', role='admin')\n            admin.set_password('admin123')\n            db.session.add(admin)\n        \n        if not SystemConfig.query.filter_by(key='deposit_percentage').first():\n            config = SystemConfig(key='deposit_percentage', value='30')\n            db.session.add(config)\n        \n        if MenuItem.query.count() == 0:\n            sample_items = [\n                MenuItem(name='Beef Stew', category='Main', price_per_person=500, ingredients='Beef, Onions, Tomatoes, Spices'),\n                MenuItem(name='Chicken Curry', category='Main', price_per_person=450, ingredients='Chicken, Curry powder, Coconut milk'),\n                MenuItem(name='Vegetable Rice', category='Side', price_per_person=200, ingredients='Rice, Mixed vegetables, Oil'),\n                MenuItem(name='Chapati', category='Side', price_per_person=50, ingredients='Wheat flour, Oil, Salt'),\n                MenuItem(name='Fruit Salad', category='Dessert', price_per_person=150, ingredients='Mixed fruits, Honey'),\n            ]\n            for item in sample_items:\n                db.session.add(item)\n        \n        db.session.commit()\n        print(\"Database initialized successfully!\")\n\nif __name__ == '__main__':\n    init_db()\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":21084},"models.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\n\ndb = SQLAlchemy()\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(20), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    chef = db.relationship('Chef', backref='user', uselist=False, lazy=True)\n    events = db.relationship('Event', backref='customer', lazy=True)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Chef(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    name = db.Column(db.String(100), nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n    county = db.Column(db.String(50), nullable=False)\n    sub_county = db.Column(db.String(50), nullable=False)\n    town = db.Column(db.String(50), nullable=False)\n    about = db.Column(db.Text)\n    meals_offered = db.Column(db.Text)\n    photo_url = db.Column(db.String(200))\n    is_verified = db.Column(db.Boolean, default=False)\n    is_approved = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    bookings = db.relationship('Booking', backref='chef', lazy=True)\n\nclass Event(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    customer_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    county = db.Column(db.String(50), nullable=False)\n    sub_county = db.Column(db.String(50), nullable=False)\n    town = db.Column(db.String(50), nullable=False)\n    adult_guests = db.Column(db.Integer, nullable=False)\n    child_guests = db.Column(db.Integer, nullable=False)\n    event_date = db.Column(db.DateTime, nullable=False)\n    menu_items = db.Column(db.Text)\n    total_cost = db.Column(db.Float, default=0.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    bookings = db.relationship('Booking', backref='event', lazy=True)\n\nclass MenuItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    category = db.Column(db.String(50))\n    price_per_person = db.Column(db.Float, nullable=False)\n    ingredients = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Booking(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    event_id = db.Column(db.Integer, db.ForeignKey('event.id'), nullable=False)\n    chef_id = db.Column(db.Integer, db.ForeignKey('chef.id'), nullable=False)\n    status = db.Column(db.String(20), default='pending')\n    deposit_amount = db.Column(db.Float)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    confirmed_at = db.Column(db.DateTime)\n    \n    payments = db.relationship('Payment', backref='booking', lazy=True)\n\nclass Payment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    booking_id = db.Column(db.Integer, db.ForeignKey('booking.id'), nullable=False)\n    phone_number = db.Column(db.String(20), nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    mpesa_receipt_number = db.Column(db.String(50))\n    transaction_id = db.Column(db.String(50))\n    status = db.Column(db.String(20), default='pending')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n\nclass OTP(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), nullable=False)\n    code = db.Column(db.String(6), nullable=False)\n    expires_at = db.Column(db.DateTime, nullable=False)\n    is_used = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass SystemConfig(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    key = db.Column(db.String(50), unique=True, nullable=False)\n    value = db.Column(db.String(200), nullable=False)\n","size_bytes":4309},"otp.py":{"content":"import random\nimport string\nfrom datetime import datetime, timedelta\nfrom models import db, OTP\n\ndef generate_otp(email):\n    code = ''.join(random.choices(string.digits, k=6))\n    expires_at = datetime.utcnow() + timedelta(minutes=5)\n    \n    existing_otp = OTP.query.filter_by(email=email, is_used=False).first()\n    if existing_otp:\n        db.session.delete(existing_otp)\n    \n    otp = OTP(email=email, code=code, expires_at=expires_at)\n    db.session.add(otp)\n    db.session.commit()\n    \n    print(f\"\\n{'='*50}\")\n    print(f\"OTP VERIFICATION CODE\")\n    print(f\"{'='*50}\")\n    print(f\"Email: {email}\")\n    print(f\"Code: {code}\")\n    print(f\"Expires: {expires_at.strftime('%Y-%m-%d %H:%M:%S')} UTC\")\n    print(f\"{'='*50}\\n\")\n    \n    return code\n\ndef verify_otp(email, code):\n    otp = OTP.query.filter_by(email=email, code=code, is_used=False).first()\n    \n    if not otp:\n        return False, \"Invalid OTP code\"\n    \n    if datetime.utcnow() > otp.expires_at:\n        return False, \"OTP code has expired\"\n    \n    otp.is_used = True\n    db.session.commit()\n    \n    return True, \"OTP verified successfully\"\n","size_bytes":1115},"payments.py":{"content":"import requests\nimport base64\nimport os\nfrom datetime import datetime\nfrom models import db, Payment, Booking\n\ndef get_access_token():\n    consumer_key = os.getenv('MPESA_CONSUMER_KEY', 'test_key')\n    consumer_secret = os.getenv('MPESA_CONSUMER_SECRET', 'test_secret')\n    api_url = os.getenv('MPESA_API_URL', 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials')\n    \n    credentials = base64.b64encode(f'{consumer_key}:{consumer_secret}'.encode()).decode()\n    headers = {'Authorization': f'Basic {credentials}'}\n    \n    try:\n        response = requests.get(api_url, headers=headers)\n        if response.status_code == 200:\n            return response.json().get('access_token')\n        return None\n    except Exception as e:\n        print(f\"Error getting access token: {e}\")\n        return None\n\ndef initiate_mpesa_stk(phone, amount, booking_id):\n    access_token = get_access_token()\n    if not access_token:\n        print(\"Failed to get M-PESA access token. Using simulation mode.\")\n        return simulate_payment(phone, amount, booking_id)\n    \n    api_url = os.getenv('MPESA_STK_URL', 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest')\n    business_shortcode = os.getenv('MPESA_SHORTCODE', '174379')\n    passkey = os.getenv('MPESA_PASSKEY', 'test_passkey')\n    \n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n    password = base64.b64encode(f'{business_shortcode}{passkey}{timestamp}'.encode()).decode()\n    \n    headers = {\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'application/json'\n    }\n    \n    payload = {\n        'BusinessShortCode': business_shortcode,\n        'Password': password,\n        'Timestamp': timestamp,\n        'TransactionType': 'CustomerPayBillOnline',\n        'Amount': int(amount),\n        'PartyA': phone,\n        'PartyB': business_shortcode,\n        'PhoneNumber': phone,\n        'CallBackURL': os.getenv('MPESA_CALLBACK_URL', 'https://yourapp.repl.co/mpesa/callback'),\n        'AccountReference': f'Booking-{booking_id}',\n        'TransactionDesc': f'Deposit for booking #{booking_id}'\n    }\n    \n    try:\n        response = requests.post(api_url, json=payload, headers=headers)\n        if response.status_code == 200:\n            result = response.json()\n            if result.get('ResponseCode') == '0':\n                return {\n                    'success': True,\n                    'message': 'STK push sent successfully',\n                    'checkout_request_id': result.get('CheckoutRequestID')\n                }\n        return {\n            'success': False,\n            'message': 'Failed to initiate payment'\n        }\n    except Exception as e:\n        print(f\"Error initiating M-PESA payment: {e}\")\n        return simulate_payment(phone, amount, booking_id)\n\ndef simulate_payment(phone, amount, booking_id):\n    print(f\"\\n{'='*50}\")\n    print(f\"M-PESA SIMULATION MODE\")\n    print(f\"{'='*50}\")\n    print(f\"Booking ID: {booking_id}\")\n    print(f\"Phone: {phone}\")\n    print(f\"Amount: KES {amount}\")\n    print(f\"{'='*50}\")\n    print(\"Payment simulation: Automatically marking as successful\")\n    print(f\"{'='*50}\\n\")\n    \n    payment = Payment.query.filter_by(booking_id=booking_id, status='pending').first()\n    if payment:\n        payment.status = 'success'\n        payment.mpesa_receipt_number = f'SIM{datetime.now().strftime(\"%Y%m%d%H%M%S\")}'\n        payment.completed_at = datetime.utcnow()\n        \n        booking = Booking.query.get(booking_id)\n        if booking:\n            booking.status = 'confirmed'\n            booking.confirmed_at = datetime.utcnow()\n        \n        db.session.commit()\n        return {\n            'success': True,\n            'message': 'Payment simulated successfully',\n            'receipt': payment.mpesa_receipt_number\n        }\n    \n    return {\n        'success': False,\n        'message': 'Payment record not found'\n    }\n\ndef handle_mpesa_callback(callback_data):\n    try:\n        result_code = callback_data.get('Body', {}).get('stkCallback', {}).get('ResultCode')\n        checkout_request_id = callback_data.get('Body', {}).get('stkCallback', {}).get('CheckoutRequestID')\n        \n        if result_code == 0:\n            metadata = callback_data.get('Body', {}).get('stkCallback', {}).get('CallbackMetadata', {}).get('Item', [])\n            mpesa_receipt = None\n            phone = None\n            amount = None\n            \n            for item in metadata:\n                if item.get('Name') == 'MpesaReceiptNumber':\n                    mpesa_receipt = item.get('Value')\n                elif item.get('Name') == 'PhoneNumber':\n                    phone = item.get('Value')\n                elif item.get('Name') == 'Amount':\n                    amount = item.get('Value')\n            \n            payment = Payment.query.filter_by(transaction_id=checkout_request_id).first()\n            if payment:\n                payment.status = 'success'\n                payment.mpesa_receipt_number = mpesa_receipt\n                payment.completed_at = datetime.utcnow()\n                \n                booking = Booking.query.get(payment.booking_id)\n                if booking:\n                    booking.status = 'confirmed'\n                    booking.confirmed_at = datetime.utcnow()\n                \n                db.session.commit()\n                return {'success': True}\n        \n        return {'success': False, 'message': 'Payment failed'}\n    except Exception as e:\n        print(f\"Error handling M-PESA callback: {e}\")\n        return {'success': False, 'message': str(e)}\n","size_bytes":5565},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"python-dotenv>=1.1.1\",\n    \"reportlab>=4.4.4\",\n    \"requests>=2.32.5\",\n]\n","size_bytes":297},"replit.md":{"content":"# e-Rugah - Electronic Cooking Platform\n\n## Overview\n\ne-Rugah is a web-based marketplace platform that connects customers hosting events with professional chefs. The platform enables customers to create events, select menus, get matched with local chefs based on proximity, and complete bookings through M-PESA payment integration. Chefs can register their services, while administrators manage the system through chef approvals, menu management, and reporting capabilities.\n\n**Core Value Proposition:** Simplify event catering by automating chef discovery, cost estimation, and secure payment processing.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Application Framework\n- **Technology Stack:** Python Flask web framework with Jinja2 templating\n- **Rationale:** Flask provides lightweight, flexible routing and easy integration with SQLAlchemy ORM\n- **Frontend:** Server-side rendered HTML templates with Bootstrap 5 for responsive UI\n- **Session Management:** Flask-Login for authentication state persistence\n\n### Data Persistence Layer\n- **Database:** SQLite with SQLAlchemy ORM\n- **Design Pattern:** Relational model with clear entity relationships\n- **Key Entities:**\n  - **User:** Base authentication entity with role-based access (customer/chef/admin)\n  - **Chef:** Extended profile for service providers with location and verification status\n  - **Event:** Customer-created events with menu selections and cost calculations\n  - **Booking:** Links events to chefs with deposit tracking\n  - **MenuItem:** Admin-managed catalog with pricing and ingredients\n  - **Payment:** M-PESA transaction records with status tracking\n  - **OTP:** Temporary verification codes with expiration logic\n  - **SystemConfig:** Dynamic configuration (e.g., deposit percentage)\n\n**Architecture Decision:** One-to-many relationships between User→Chef, User→Event, Chef→Booking, Event→Booking. Menu items stored as comma-separated IDs in Event.menu_items for simplicity.\n\n### Authentication & Authorization\n- **Strategy:** Role-based access control (RBAC) with three distinct user types\n- **Implementation:** \n  - Password hashing via Werkzeug security utilities\n  - Custom `@role_required` decorator for route protection\n  - Flask-Login for session management\n- **Email Verification:** OTP-based verification for chef registrations\n  - 6-digit codes with 5-minute expiration\n  - Currently prints to console (simulated SMS/email)\n\n### Business Logic: Chef Matching Algorithm\n- **Proximity-based Matching:** Three-tier location hierarchy (County → Sub-County → Town)\n- **Filtering Logic:**\n  1. Match chefs in same county as event\n  2. Prioritize sub-county matches\n  3. Further filter by town if available\n  4. Only show approved and verified chefs\n- **Rationale:** Ensures customers get nearby chefs without complex geolocation dependencies\n\n### Cost Calculation System\n- **Event Costing:** Sum of (selected menu items × total guests)\n- **Deposit Calculation:** Configurable percentage of total event cost (admin-managed)\n- **Menu Pricing:** Per-person pricing model stored in MenuItem.price\n\n### Payment Processing\n- **Gateway:** M-PESA Daraja API (Safaricom's mobile money platform)\n- **Flow:**\n  1. Customer selects chef → system calculates deposit\n  2. STK Push initiated with phone number and amount\n  3. Callback handler updates payment status\n  4. Booking status changes to \"confirmed\" on successful payment\n- **Fallback:** Simulation mode when API credentials unavailable\n- **Transaction Tracking:** All payments logged with M-PESA receipt numbers and timestamps\n\n### Reporting & Analytics\n- **Filtering Capabilities:** Date range, chef, location-based queries\n- **Export Formats:** \n  - CSV for spreadsheet analysis\n  - PDF via ReportLab library for formal reports\n- **Metrics:** Total deposits collected, booking counts, chef performance\n\n### Admin Management Interface\n- **Chef Approval Workflow:** Two-stage verification (email OTP + admin approval)\n- **Menu Management:** Full CRUD operations for menu items with categorization\n- **System Configuration:** Dynamic settings (currently deposit percentage only)\n- **Dashboard:** Summary statistics with pending approval queue\n\n### Security Considerations\n- **Password Storage:** Hashed using Werkzeug's generate_password_hash\n- **Session Security:** Secret key-based session encryption (environment variable configurable)\n- **OTP Expiration:** Time-limited codes prevent replay attacks\n- **Role Enforcement:** Decorator-based route protection ensures privilege separation\n\n**Design Trade-offs:**\n- SQLite chosen for simplicity; may require migration to PostgreSQL for production scale\n- Menu items stored as text field rather than junction table for development speed\n- M-PESA simulation mode enables testing without live credentials\n- Server-side rendering chosen over SPA for reduced frontend complexity\n\n## External Dependencies\n\n### Third-Party Services\n1. **M-PESA Daraja API (Safaricom)**\n   - Purpose: Mobile money payment processing\n   - Integration: STK Push for customer payments\n   - Configuration: Environment variables for consumer key, secret, shortcode, passkey\n   - Endpoints: OAuth token generation, STK push requests, callback handling\n   - Fallback: Simulation mode for development/testing\n\n### Python Libraries\n- **Flask** - Web framework and routing\n- **Flask-SQLAlchemy** - ORM for database operations\n- **Flask-Login** - User session management\n- **Werkzeug** - Password hashing and security utilities\n- **ReportLab** - PDF generation for reports\n- **Requests** - HTTP client for M-PESA API calls\n\n### Frontend Dependencies\n- **Bootstrap 5.1.3** - CSS framework (CDN)\n- **Bootstrap Icons** - Icon library (CDN)\n\n### Environment Configuration\nRequired environment variables:\n- `SESSION_SECRET` - Flask session encryption key\n- `MPESA_CONSUMER_KEY` - Daraja API credentials\n- `MPESA_CONSUMER_SECRET` - Daraja API credentials\n- `MPESA_SHORTCODE` - Business shortcode\n- `MPESA_PASSKEY` - API passkey\n- `MPESA_API_URL` - OAuth endpoint\n- `MPESA_STK_URL` - STK Push endpoint\n\n**Note:** No email/SMS service currently integrated; OTP codes print to console for development.","size_bytes":6212},"static/css/style.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap');\n\n:root {\n    --primary-color: #ff6b35;\n    --secondary-color: #f7931e;\n    --success-color: #2ecc71;\n    --danger-color: #e74c3c;\n    --dark-color: #2c3e50;\n    --light-color: #ecf0f1;\n    --text-dark: #34495e;\n    --accent-color: #ff9f43;\n    --food-green: #6ab04c;\n    --food-red: #eb4d4b;\n    --food-purple: #9b59b6;\n    --food-yellow: #f39c12;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Poppins', sans-serif;\n    color: var(--text-dark);\n    line-height: 1.6;\n    background: #fff8f0;\n    background-image: \n        radial-gradient(circle at 10% 20%, rgba(255, 107, 53, 0.05) 0%, transparent 50%),\n        radial-gradient(circle at 90% 80%, rgba(247, 147, 30, 0.05) 0%, transparent 50%),\n        radial-gradient(circle at 50% 50%, rgba(106, 176, 76, 0.03) 0%, transparent 70%);\n    min-height: 100vh;\n    position: relative;\n    overflow-x: hidden;\n}\n\nbody::before {\n    content: '';\n    position: fixed;\n    top: -50%;\n    right: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 159, 67, 0.03) 1px, transparent 1px);\n    background-size: 50px 50px;\n    animation: grain 8s steps(10) infinite;\n    pointer-events: none;\n    z-index: -1;\n}\n\n@keyframes grain {\n    0%, 100% { transform: translate(0, 0); }\n    10% { transform: translate(-5%, -10%); }\n    30% { transform: translate(3%, -15%); }\n    50% { transform: translate(12%, 9%); }\n    70% { transform: translate(9%, 4%); }\n    90% { transform: translate(-1%, 7%); }\n}\n\n@keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n}\n\n@keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n}\n\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n@keyframes shimmer {\n    0% { background-position: -1000px 0; }\n    100% { background-position: 1000px 0; }\n}\n\n.navbar {\n    background: linear-gradient(135deg, var(--dark-color) 0%, #1a252f 100%) !important;\n    box-shadow: 0 4px 30px rgba(0,0,0,0.15);\n    padding: 1rem 0;\n    backdrop-filter: blur(10px);\n    position: sticky;\n    top: 0;\n    z-index: 1000;\n    animation: fadeIn 0.5s ease-in;\n}\n\n.navbar-brand {\n    font-size: 2rem;\n    font-weight: 800;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    background-size: 200% auto;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    letter-spacing: 1.5px;\n    animation: shimmer 3s linear infinite;\n    text-shadow: 0 0 30px rgba(255, 107, 53, 0.3);\n}\n\n.navbar-brand i {\n    animation: pulse 2s ease-in-out infinite;\n    display: inline-block;\n}\n\n.navbar-brand:hover {\n    transform: scale(1.08) rotate(-2deg);\n    transition: transform 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n.nav-link {\n    color: rgba(255, 255, 255, 0.9) !important;\n    font-weight: 500;\n    margin: 0 0.5rem;\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    position: relative;\n    padding: 0.5rem 1rem !important;\n}\n\n.nav-link:hover {\n    color: var(--accent-color) !important;\n    transform: translateY(-3px);\n}\n\n.nav-link::before {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 0;\n    height: 3px;\n    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n    transition: width 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    border-radius: 10px;\n}\n\n.nav-link:hover::before {\n    width: 80%;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    background-size: 200% auto;\n    border: none;\n    padding: 0.85rem 2.5rem;\n    font-weight: 600;\n    border-radius: 50px;\n    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    position: relative;\n    overflow: hidden;\n    color: white;\n}\n\n.btn-primary::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n}\n\n.btn-primary:hover::before {\n    width: 300px;\n    height: 300px;\n}\n\n.btn-primary:hover {\n    transform: translateY(-5px) scale(1.05);\n    box-shadow: 0 12px 35px rgba(255, 107, 53, 0.5);\n    background-position: right center;\n}\n\n.btn-success {\n    background: linear-gradient(135deg, var(--food-green), #4cd137, #44bd32);\n    background-size: 200% auto;\n    border: none;\n    padding: 0.85rem 2.5rem;\n    font-weight: 600;\n    border-radius: 50px;\n    box-shadow: 0 8px 25px rgba(106, 176, 76, 0.4);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    color: white;\n}\n\n.btn-success:hover {\n    transform: translateY(-5px) scale(1.05);\n    box-shadow: 0 12px 35px rgba(106, 176, 76, 0.5);\n    background-position: right center;\n}\n\n.btn-outline-secondary {\n    border: 2px solid var(--primary-color);\n    color: var(--primary-color);\n    padding: 0.85rem 2.5rem;\n    font-weight: 600;\n    border-radius: 50px;\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    background: transparent;\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-outline-secondary::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    transition: left 0.4s ease;\n    z-index: -1;\n}\n\n.btn-outline-secondary:hover::before {\n    left: 0;\n}\n\n.btn-outline-secondary:hover {\n    color: white;\n    border-color: transparent;\n    transform: translateY(-5px) scale(1.05);\n    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);\n}\n\n.card {\n    border: none;\n    border-radius: 25px;\n    box-shadow: 0 15px 45px rgba(0, 0, 0, 0.1);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    overflow: hidden;\n    background: white;\n    position: relative;\n    animation: slideIn 0.6s ease-out;\n}\n\n.card::before {\n    content: '';\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color), var(--food-green), var(--primary-color));\n    background-size: 400%;\n    border-radius: 25px;\n    opacity: 0;\n    transition: opacity 0.4s ease;\n    animation: shimmer 8s linear infinite;\n    z-index: -1;\n}\n\n.card:hover::before {\n    opacity: 1;\n}\n\n.card:hover {\n    transform: translateY(-10px) scale(1.02);\n    box-shadow: 0 25px 60px rgba(0, 0, 0, 0.2);\n}\n\n.card-body {\n    padding: 2.5rem;\n    position: relative;\n    z-index: 1;\n    background: white;\n    border-radius: 25px;\n}\n\n.card-title {\n    color: var(--dark-color);\n    font-weight: 700;\n    margin-bottom: 1.5rem;\n}\n\n.hero-section {\n    padding: 5rem 0;\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.08) 0%, rgba(247, 147, 30, 0.08) 50%, rgba(106, 176, 76, 0.05) 100%);\n    border-radius: 40px;\n    margin: 2rem 0;\n    position: relative;\n    overflow: hidden;\n    animation: fadeIn 0.8s ease-in;\n}\n\n.hero-section::before {\n    content: '🍳';\n    position: absolute;\n    font-size: 20rem;\n    opacity: 0.03;\n    top: -5rem;\n    right: -5rem;\n    animation: float 6s ease-in-out infinite;\n    pointer-events: none;\n}\n\n.hero-section::after {\n    content: '🥘';\n    position: absolute;\n    font-size: 15rem;\n    opacity: 0.03;\n    bottom: -3rem;\n    left: -3rem;\n    animation: float 8s ease-in-out infinite;\n    animation-delay: -2s;\n    pointer-events: none;\n}\n\n.display-4 {\n    font-weight: 800;\n    color: var(--dark-color);\n    line-height: 1.2;\n    animation: slideIn 0.8s ease-out;\n}\n\n.lead {\n    color: var(--text-dark);\n    font-size: 1.3rem;\n    font-weight: 400;\n    animation: slideIn 1s ease-out;\n}\n\n.feature-icon {\n    width: 70px;\n    height: 70px;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    border-radius: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 1.8rem;\n    margin-bottom: 1rem;\n    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    animation: pulse 2s ease-in-out infinite;\n}\n\n.feature-icon:hover {\n    transform: scale(1.15) rotate(5deg);\n    box-shadow: 0 12px 35px rgba(255, 107, 53, 0.5);\n}\n\n.how-it-works-item {\n    background: white;\n    padding: 1.8rem;\n    border-radius: 20px;\n    margin-bottom: 1.5rem;\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    border-left: 5px solid var(--primary-color);\n    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);\n    position: relative;\n    overflow: hidden;\n}\n\n.how-it-works-item::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 5px;\n    height: 100%;\n    background: linear-gradient(180deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    transition: width 0.4s ease;\n}\n\n.how-it-works-item:hover::before {\n    width: 100%;\n    opacity: 0.05;\n}\n\n.how-it-works-item:hover {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.03), rgba(247, 147, 30, 0.03));\n    transform: translateX(15px) scale(1.02);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n}\n\n.how-it-works-item i {\n    color: var(--primary-color);\n    filter: drop-shadow(0 2px 4px rgba(255, 107, 53, 0.3));\n}\n\n.stats-card {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    background-size: 200% auto;\n    color: white;\n    border-radius: 25px;\n    padding: 2.5rem;\n    text-align: center;\n    box-shadow: 0 15px 45px rgba(255, 107, 53, 0.4);\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    position: relative;\n    overflow: hidden;\n    animation: slideIn 0.6s ease-out;\n}\n\n.stats-card::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    right: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 10%, transparent 10%);\n    background-size: 20px 20px;\n    animation: grain 20s linear infinite;\n}\n\n.stats-card:hover {\n    transform: translateY(-10px) scale(1.05) rotate(-1deg);\n    box-shadow: 0 20px 60px rgba(255, 107, 53, 0.6);\n    background-position: right center;\n}\n\n.stats-card h2 {\n    font-size: 3.5rem;\n    font-weight: 800;\n    margin: 0;\n    text-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n    animation: pulse 2s ease-in-out infinite;\n}\n\n.stats-card h5 {\n    font-weight: 500;\n    opacity: 0.95;\n    text-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.form-control, .form-select {\n    border: 2px solid #e8e8e8;\n    border-radius: 15px;\n    padding: 0.85rem 1.2rem;\n    transition: all 0.3s ease;\n    font-family: 'Poppins', sans-serif;\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.25rem rgba(255, 107, 53, 0.15), 0 8px 20px rgba(255, 107, 53, 0.1);\n    transform: translateY(-2px);\n}\n\n.form-label {\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.6rem;\n}\n\n.table {\n    background: white;\n    border-radius: 20px;\n    overflow: hidden;\n    box-shadow: 0 10px 35px rgba(0, 0, 0, 0.1);\n}\n\n.table thead {\n    background: linear-gradient(135deg, var(--dark-color), #1a252f);\n    color: white;\n}\n\n.table thead th {\n    border: none;\n    padding: 1.2rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    font-size: 0.85rem;\n    letter-spacing: 1px;\n}\n\n.table tbody tr {\n    transition: all 0.3s ease;\n    border-bottom: 1px solid #f0f0f0;\n}\n\n.table tbody tr:hover {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.05), rgba(247, 147, 30, 0.05));\n    transform: scale(1.01);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);\n}\n\n.table tbody td {\n    padding: 1.2rem;\n    vertical-align: middle;\n}\n\n.badge {\n    padding: 0.6rem 1.2rem;\n    border-radius: 50px;\n    font-weight: 600;\n    font-size: 0.85rem;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);\n    animation: pulse 2s ease-in-out infinite;\n}\n\n.alert {\n    border: none;\n    border-radius: 20px;\n    padding: 1.2rem 1.8rem;\n    margin-bottom: 1.5rem;\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n    animation: slideIn 0.5s ease-out;\n}\n\n.alert-success {\n    background: linear-gradient(135deg, rgba(46, 204, 113, 0.12), rgba(76, 209, 55, 0.12));\n    color: #27ae60;\n    border-left: 5px solid var(--success-color);\n}\n\n.alert-danger {\n    background: linear-gradient(135deg, rgba(231, 76, 60, 0.12), rgba(235, 77, 75, 0.12));\n    color: #c0392b;\n    border-left: 5px solid var(--danger-color);\n}\n\n.alert-warning {\n    background: linear-gradient(135deg, rgba(247, 147, 30, 0.12), rgba(255, 159, 67, 0.12));\n    color: #e67e22;\n    border-left: 5px solid var(--secondary-color);\n}\n\n.alert-info {\n    background: linear-gradient(135deg, rgba(52, 152, 219, 0.12), rgba(41, 128, 185, 0.12));\n    color: #2980b9;\n    border-left: 5px solid #3498db;\n}\n\nfooter {\n    background: linear-gradient(135deg, var(--dark-color) 0%, #1a252f 100%);\n    color: rgba(255, 255, 255, 0.9);\n    padding: 3rem 0;\n    margin-top: 5rem;\n    box-shadow: 0 -10px 40px rgba(0, 0, 0, 0.15);\n    position: relative;\n    overflow: hidden;\n}\n\nfooter::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 107, 53, 0.05) 1px, transparent 1px);\n    background-size: 30px 30px;\n    animation: grain 15s linear infinite;\n}\n\nfooter p {\n    margin: 0;\n    position: relative;\n    z-index: 1;\n}\n\n.chef-card {\n    border: none;\n    border-radius: 25px;\n    overflow: hidden;\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    background: white;\n    box-shadow: 0 15px 45px rgba(0, 0, 0, 0.1);\n    position: relative;\n}\n\n.chef-card::before {\n    content: '👨‍🍳';\n    position: absolute;\n    font-size: 15rem;\n    opacity: 0.03;\n    top: -3rem;\n    right: -3rem;\n    pointer-events: none;\n    animation: float 6s ease-in-out infinite;\n}\n\n.chef-card:hover {\n    transform: translateY(-15px) scale(1.03);\n    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.2);\n}\n\n.chef-card .card-footer {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.08), rgba(247, 147, 30, 0.08));\n    border-top: none;\n    padding: 1.8rem;\n}\n\n.menu-item-card {\n    background: white;\n    padding: 1.8rem;\n    border-radius: 20px;\n    border-left: 5px solid var(--primary-color);\n    margin-bottom: 1.2rem;\n    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);\n}\n\n.menu-item-card:hover {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.05), rgba(247, 147, 30, 0.05));\n    transform: translateX(15px) scale(1.02);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);\n}\n\n.payment-icon {\n    width: 120px;\n    height: 120px;\n    margin: 0 auto;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, var(--food-green), #4cd137);\n    color: white;\n    box-shadow: 0 15px 45px rgba(106, 176, 76, 0.4);\n    animation: pulse 2s ease-in-out infinite;\n}\n\n.payment-icon.pending {\n    background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));\n    box-shadow: 0 15px 45px rgba(247, 147, 30, 0.4);\n}\n\n.payment-icon.failed {\n    background: linear-gradient(135deg, var(--danger-color), var(--food-red));\n    box-shadow: 0 15px 45px rgba(231, 76, 60, 0.4);\n}\n\n.section-title {\n    position: relative;\n    padding-bottom: 1.2rem;\n    margin-bottom: 2rem;\n}\n\n.section-title::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 80px;\n    height: 5px;\n    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(255, 107, 53, 0.3);\n}\n\n.food-pattern {\n    position: relative;\n}\n\n.page-header {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color), var(--accent-color));\n    background-size: 200% auto;\n    color: white;\n    padding: 2.5rem;\n    border-radius: 25px;\n    margin-bottom: 2.5rem;\n    box-shadow: 0 15px 45px rgba(255, 107, 53, 0.4);\n    animation: slideIn 0.6s ease-out, shimmer 8s linear infinite;\n    position: relative;\n    overflow: hidden;\n}\n\n.page-header::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    right: -50%;\n    width: 200%;\n    height: 200%;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 1px, transparent 1px);\n    background-size: 25px 25px;\n    animation: grain 15s linear infinite;\n}\n\n.page-header h2 {\n    margin: 0;\n    font-weight: 800;\n    position: relative;\n    z-index: 1;\n    text-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n.page-header p {\n    position: relative;\n    z-index: 1;\n    text-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.info-card {\n    background: linear-gradient(135deg, rgba(255, 107, 53, 0.08), rgba(247, 147, 30, 0.08));\n    border-left: 5px solid var(--primary-color);\n    border-radius: 20px;\n    padding: 2rem;\n    margin-bottom: 2rem;\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n}\n\n.info-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);\n}\n\n.info-card strong {\n    color: var(--primary-color);\n    font-weight: 700;\n}\n\n.btn-sm {\n    border-radius: 25px;\n    padding: 0.5rem 1.2rem;\n    font-weight: 600;\n    transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n.btn-sm:hover {\n    transform: translateY(-3px) scale(1.05);\n}\n\n.table-responsive {\n    border-radius: 20px;\n    overflow: hidden;\n}\n\n.form-check-input:checked {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.25rem rgba(255, 107, 53, 0.25);\n}\n\n@media (max-width: 768px) {\n    .display-4 {\n        font-size: 2.2rem;\n    }\n    \n    .hero-section {\n        padding: 3rem 0;\n    }\n    \n    .stats-card h2 {\n        font-size: 2.5rem;\n    }\n    \n    .feature-icon {\n        width: 60px;\n        height: 60px;\n        font-size: 1.5rem;\n    }\n    \n    .navbar-brand {\n        font-size: 1.5rem;\n    }\n}\n\n.animate-on-scroll {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: opacity 0.6s ease-out, transform 0.6s ease-out;\n}\n\n.animate-on-scroll.visible {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.food-emoji {\n    display: inline-block;\n    animation: float 3s ease-in-out infinite;\n    font-size: 1.2em;\n}\n\n.btn-light {\n    background: white;\n    color: var(--primary-color);\n    border: 2px solid white;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n.btn-light:hover {\n    background: rgba(255, 255, 255, 0.9);\n    transform: translateY(-3px);\n    box-shadow: 0 8px 20px rgba(255, 255, 255, 0.3);\n}\n","size_bytes":19244}},"version":1}